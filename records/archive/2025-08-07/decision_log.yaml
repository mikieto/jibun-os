---
decisions:
  - id: DEC-2025-07-10-001
    timestamp: '2025-07-10T09:00:00+09:00'
    status: decided
    summary: OS進化の最上位Whyとして『挑戦を進める』ことを決定
    reason: 私の思考と行動を最小摩擦で可観測データに変換し、AIと外部フィードバックを高速循環させながら学習成果を安全かつ倫理的に具体的価値へ即転換できる自分OSを実現するため。
    alternatives:
      - name: 挑戦を進める
        pros: システムの進化を加速させ、自己探求という究極の目的を達成できる。
        cons: 不確実性が高く、開発コストが増大するリスクがある。
      - name: 現状維持
        pros: 安定しており、追加の開発コストが発生しない。
        cons: システムの進化が停滞し、長期的な価値向上が見込めない。
    scope:
      project: os_platform_v1
      domain: philosophy
    severity: Critical
  - id: DEC-2025-07-10-002
    timestamp: '2025-07-10T09:30:00+09:00'
    status: decided
    summary: 計画整合性チェックの結果、計画を維持することを決定
    reason: KPIシートへの利益列追加とCIへのG009リント追加により、計画の妥当性が担保されるため。
    alternatives:
      - name: 計画維持
        pros: 一貫した開発プロセスを継続できる。
        cons: N/A
      - name: 大幅修正
        pros: リスクを早期に回避できる可能性がある。
        cons: 手戻りが発生し、開発スケジュールが遅延する。
    related_tasks: [TASK-2025-07-10-003, TASK-2025-07-10-004]
    scope:
      project: os_platform_v1
      domain: project_management
    severity: High
  - id: DEC-2025-07-10-003
    timestamp: '2025-07-10T10:00:00+09:00'
    status: decided
    summary: PoC-1の完了を宣言
    reason: 定義された要件を満たし、次のステップに進む準備が整ったため。
    alternatives:
      - name: 完了を宣言する
        pros: プロジェクトを次のフェーズに進め、マイルストーンを達成できる。
        cons: 未発見の問題が残っている可能性がある。
      - name: 作業を継続する
        pros: 品質をさらに高めることができる。
        cons: スケジュールが遅延し、機会損失に繋がるリスクがある。
    scope:
      project: os_platform_v1
      domain: milestone
    severity: High
  - id: DEC-2025-07-10-004
    timestamp: '2025-07-10T10:30:00+09:00'
    status: decided
    summary: OSの三層（common, personal, logs）＋フォルダ分割の実施を決定
    reason: システムのモジュール性と可読性を高め、長期的なメンテナンス性を向上させるため。
    alternatives:
      - name: 実施
        pros: 関心の分離が実現し、アーキテクチャが堅牢になる。
        cons: 初期の移行コストが発生する。
      - name: 延期
        pros: 目先の開発に集中できる。
        cons: 技術的負債が蓄積し、将来の変更が困難になる。
    related_tasks: [TASK-2025-07-10-005, TASK-2025-07-10-006]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-07-10-005
    timestamp: '2025-07-10T11:00:00+09:00'
    status: decided
    summary: personal/profile.yamlの作成を決定
    reason: OS所有者固有の固定情報を一元管理し、他の設定ファイルから参照可能にするため。
    alternatives:
      - name: 作成する
        pros: 設定情報がDRY（Don't Repeat Yourself）になり、一貫性が保たれる。
        cons: ファイルが一つ増える。
      - name: 見送る
        pros: ファイル数を増やさずに済む。
        cons: 同じ情報が複数のファイルに分散し、管理が煩雑になる。
    related_tasks: [TASK-2025-07-10-007]
    scope:
      project: os_platform_v1
      domain: configuration
    severity: Medium
  - id: DEC-2025-07-10-006
    timestamp: '2025-07-10T11:30:00+09:00'
    status: decided
    summary: OSの共通部分と個人部分の分離を決定
    reason: OSを再利用可能なフレームワークと、個人インスタンスに分離することで、システムのポータビリティと個人の独自性を両立させるため。
    alternatives:
      - name: split_common
        pros: システムの再利用性が飛躍的に向上し、他者への展開が可能になる。
        cons: 初期の設計と実装の複雑性が増す。
      - name: keep_mono
        pros: 単一リポジトリで管理がシンプル。
        cons: システム全体が個人に密結合し、再利用が困難になる。
    related_tasks:
      - TASK-2025-07-10-008
      - TASK-2025-07-10-009
      - TASK-2025-07-10-010
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-07-10-007
    timestamp: '2025-07-10T12:00:00+09:00'
    status: decided
    summary: domainsフォルダの追加を決定
    reason: プロジェクト横断的な知識領域（例：学習、健康）を管理するための、新しいスコープを導入するため。
    alternatives:
      - name: 追加する
        pros: 知識の分類体系がより豊かになり、Zettelkastenの表現力が高まる。
        cons: ディレクトリ構造が一段階深くなる。
      - name: 見送る
        pros: シンプルな構造を維持できる。
        cons: プロジェクトに属さない知識の置き場所に困る可能性がある。
    related_tasks: [TASK-2025-07-10-001]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Medium
  - id: DEC-2025-07-10-008
    timestamp: '2025-07-10T13:00:00+09:00'
    status: decided
    summary: taxonomyファイルの作成を決定
    reason: OS全体で使われるタグや分類（例：severity_levels）を一元管理し、システム全体の一貫性を保証するため。
    alternatives:
      - name: 作成する
        pros: 分類体系の唯一の信頼できる情報源（Single Source of Truth）となり、機械可読性も高まる。
        cons: 管理するファイルが一つ増える。
      - name: 見送る
        pros: ファイル数を増やさずに済む。
        cons: 各ファイルで分類がバラバラに定義され、不整合が発生するリスクがある。
    related_tasks: [TASK-2025-07-10-002]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-10-009
    timestamp: '2025-07-10T13:30:00+09:00'
    status: decided
    summary: オーバーエンジニアリングを抑止し、最小実装で進む方針を決定
    reason: 価値を最速で検証し、不要な機能開発による無駄を避けるため。リーンなアプローチを維持する。
    alternatives:
      - name: 最小実装で進む
        pros: 開発サイクルが速まり、早期にフィードバックを得られる。
        cons: 将来的な拡張性を見越した設計が不足する可能性がある。
      - name: 追加施策も同時実装
        pros: 将来の拡張に対応しやすい。
        cons: 開発が遅れ、市場投入が遅れるリスクがある。また、使われない機能を作る可能性がある。
    scope:
      project: os_platform_v1
      domain: development_philosophy
    severity: High
  - id: DEC-2025-07-10-010
    timestamp: '2025-07-10T14:00:00+09:00'
    status: decided
    summary: 依存関係ファイルの分割を決定
    reason: ランタイムとCI依存を分離し、本番イメージのセキュリティとビルド速度を最適化するため。
    alternatives:
      - name: split
        pros: 本番環境のコンテナイメージが軽量になり、セキュリティリスクが低減する。
        cons: 依存関係の管理がわずかに複雑になる。
      - name: single_file
        pros: 管理がシンプル。
        cons: 本番環境に不要なライブラリが含まれ、イメージサイズと脆弱性が増大する。
    related_tasks: [TASK-2025-07-10-011]
    scope:
      project: os_platform_v1
      domain: ci_cd
    severity: Medium
  - id: DEC-2025-07-10-011
    timestamp: '2025-07-10T14:30:00+09:00'
    status: decided
    summary: 旧式のルートコア設定ファイルを削除
    reason: 三層分割後は役割が重複。CI競合とメンテナンス負荷を避けるため削除する。
    alternatives:
      - name: delete
        pros: 技術的負債が解消され、システムがシンプルになる。
        cons: 過去の参照が完全に失われる。
      - name: pointer
        pros: 過去の参照を残せる。
        cons: 不要なファイルが残り続ける。
      - name: archive
        pros: 履歴として保存できる。
        cons: リポジトリ内に残り、ノイズとなる可能性がある。
    related_tasks: [TASK-2025-07-10-012]
    scope:
      project: os_platform_v1
      domain: refactoring
    severity: Medium
  - id: DEC-2025-07-10-012
    timestamp: '2025-07-10T15:00:00+09:00'
    status: decided
    summary: OS全体をリファクタリングし、再利用性を高めることを決定
    reason: OSの再利用性と構造的完成度を飛躍的に高めるため。憲法だけでなく実装ガイドも含めた全体を「共通フレームワーク」と「個人実装」に分離することで、個人のツールから他者も利用可能なOSフレームワークへと進化させる。
    alternatives:
      - name: OS全体をリファクタリング（高モジュール化）
        pros: システムのポータビリティと個人の独自性を両立できる、理想的なアーキテクチャになる。
        cons: 大規模な変更となり、時間とコストがかかる。
      - name: 憲法のみリファクタリング
        pros: 変更範囲が限定的で、リスクが低い。
        cons: 中途半端な分離となり、根本的な課題が解決されない。
    related_tasks: [TASK-2025-07-10-013]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-07-10-013
    timestamp: '2025-07-10T15:30:00+09:00'
    status: decided
    summary: v3アーキテクチャに関するフィードバックの採択を決定
    reason: 機械可読性、CI堅牢性、ドキュメント導線を強化し、AIと新規協力者の双方にとっての運用性を高めるため。
    alternatives:
      - name: フィードバックを採択
        pros: 第三者の視点を取り入れ、システムの客観的な品質が向上する。
        cons: 追加の修正作業が発生する。
      - name: 現行案を維持
        pros: 追加作業が不要。
        cons: 潜在的な改善機会を逃す。
    related_tasks:
      - TASK-2025-07-10-014
      - TASK-2025-07-10-015
      - TASK-2025-07-10-016
      - TASK-2025-07-10-017
    scope:
      project: os_platform_v1
      domain: project_management
    severity: High
  - id: DEC-2025-07-10-014
    timestamp: '2025-07-10T16:00:00+09:00'
    status: decided
    summary: system_map.yamlの作成を決定
    reason: AIがOSの構造、役割、依存関係を機械的に理解できる必要性がある。これにより、AIによる自動検証、ガイダンス、冗長性排除、一貫性確保が可能となり、将来的な改造・機能追加時の間違いや余分な作業を削減するため。
    alternatives:
      - name: system_mapを作成する
        pros: OSが自己記述性を持ち、AIとの協働レベルが飛躍的に向上する。
        cons: マップ自体のメンテナンスコストが発生する。
      - name: system_mapを作成しない
        pros: 管理ファイルが一つ少なくて済む。
        cons: AIがOSの全体像を把握できず、支援の質が低下する。
    related_tasks: [TASK-2025-07-10-018]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-07-10-015
    timestamp: '2025-07-10T16:30:00+09:00'
    status: decided
    summary: 書籍プロジェクトのdecision-log.mdを共通/個人に分離することを決定
    reason: 書籍プロジェクトのdecision-log.mdを普遍的なプロジェクト管理原則と書籍執筆プロジェクト固有の要素に分離することで、OSの「コピー可能な自己」の最高目的をプロジェクト管理にも適用し、再利用性、一貫性、AI協働の効率性を向上させるため。
    alternatives:
      - name: decision-log.mdを共通/個人に分離
        pros: プロジェクト管理のノウハウが再利用可能な資産になる。
        cons: 初期の分離作業に手間がかかる。
      - name: decision-log.mdを現状維持
        pros: 作業が不要。
        cons: 特定のプロジェクトに依存した知見となり、再利用性が低い。
    related_tasks: [TASK-2025-07-10-019]
    scope:
      project: os_platform_v1
      domain: refactoring
    severity: High
  - id: DEC-2025-07-10-016
    timestamp: '2025-07-10T17:00:00+09:00'
    status: decided
    summary: developブランチのCI検証を有効にすることを決定
    reason: developブランチでの変更の品質を早期に保証し、mainブランチへのマージをスムーズに行うため。以前発生していたjibun_os.yml参照エラーを解消し、CIをパスさせることを目的とする。
    alternatives:
      - name: developブランチのCI検証を有効にする
        pros: マージ前の品質が向上し、mainブランチの安定性が高まる。
        cons: developブランチでのコミットに対するフィードバックサイクルがわずかに長くなる。
      - name: developブランチのCI検証を有効にしない
        pros: 開発中のコミットが素早く行える。
        cons: 問題の発見が遅れ、マージ時に大きな手戻りが発生するリスクがある。
    related_tasks: [TASK-2025-07-11-001]
    scope:
      project: os_platform_v1
      domain: ci_cd
    severity: High
  - id: DEC-2025-07-10-017
    timestamp: '2025-07-10T17:30:00+09:00'
    status: decided
    summary: AIコンテキスト供給用のスクリプト導入を決定
    reason: AIへのコンテキストフィードの手間を大幅に削減するため。OSの根幹情報とプラットフォーム状況を常にAIに共有し、自律的な認識と協働を促進する。
    alternatives:
      - name: コア＆プラットフォームコンテキストスクリプトを導入
        pros: AIとの対話の準備時間が短縮され、協働がよりスムーズになる。
        cons: スクリプト自体のメンテナンスが必要になる。
      - name: 手動でのコンテキストフィードを維持
        pros: 追加のツールが不要。
        cons: 毎回の手作業が煩雑で、コンテキストの与え忘れによる精度低下のリスクがある。
    related_tasks: [TASK-2025-07-11-002]
    scope:
      project: os_platform_v1
      domain: automation
    severity: High
  - id: DEC-2025-07-10-018
    timestamp: '2025-07-10T18:00:00+09:00'
    status: decided
    summary: AIコンテキストファイルをsystem_map.yamlから動的にロードすることを決定
    reason: AIへのコンテキストフィードにおける「実体との乖離」リスクを排除し、system_map.yamlをOSの唯一の信頼できる情報源（Single
      Source of Truth）として維持するため。
    alternatives:
      - name: system_map.yamlからAIコンテキストファイルを動的にロード
        pros: system_map.yamlの更新が自動的にAIコンテキストに反映され、手動修正の手間とミスがなくなる。
        cons: スクリプトがsystem_map.yamlの構造に依存するようになる。
      - name: AIコンテキストファイルをスクリプトにハードコード
        pros: スクリプトが自己完結している。
        cons: OSのファイル構造を変更するたびに、スクリプトの修正が必要になり、メンテナンス性が低い。
    related_tasks: [TASK-2025-07-11-003, TASK-2025-07-11-004]
    scope:
      project: os_platform_v1
      domain: automation
    severity: Critical
  - id: DEC-2025-07-10-019
    timestamp: '2025-07-10T18:30:00+09:00'
    status: decided
    summary: 書籍『リーンデータエンジニアリング(仮)』の定義ファイルを、専用リポジトリへ移動することを決定
    reason: 書籍執筆プロジェクトのルールと計画の「唯一の信頼できる情報源」を、そのプロジェクトのGitリポジトリ自体に配置することで、プロジェクトの自己完結性を高める。
    alternatives:
      - name: lean_data_engineering_book.yamlを本執筆リポジトリへ移動
        pros: プロジェクトの関心事が明確に分離され、各リポジトリの役割が純化する。
        cons: リポジトリをまたいだ管理が必要になる。
      - name: lean_data_engineering_book.yamlをjibun-os内に維持
        pros: 単一リポジトリで管理できる。
        cons: jibun-osリポジトリに、本来の責務ではないプロジェクト固有の情報が混在する。
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-13-001
    timestamp: '2025-07-13T22:21:00+09:00'
    status: decided
    summary: task_log.yamlの構造を定義し、導入することを決定
    reason: decision_logが構造化された今、次に行動の記録であるtask_logを構造化することで、決定から行動へのトレーサビリティを確保し、プロジェクトの実行状況の可観測性を高めるため。
    alternatives:
      - name: 新しい構造を導入する
        pros: 決定とタスクの連携が明確になり、進捗管理が容易になる。
        cons: フォーマットの変更に伴う、既存ツールの修正が必要になる可能性がある。
      - name: 現状のフォーマットを維持する
        pros: 追加の作業が不要。
        cons: ログの価値が限定的で、AIによる自動分析や支援が困難。
    related_tasks: [TASK-2025-07-17-001]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-17-001
    timestamp: '2025-07-17T10:20:00+09:00'
    status: closed
    reason: プロンプト短期文脈とデジタルツイン長期文脈を整合させるため、四層統治モデル（ログ・Zettel・法律・憲法）を正式採択する。
    related_tasks: [TASK-2025-07-17-006, TASK-2025-07-17-008]
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-17-002
    timestamp: '2025-07-17T10:25:00+09:00'
    status: closed
    reason: 6 か月以内に実運用事例を獲得し、市場適合を検証するためPoC→有償PoC→Case Study の三段階プランを採用。
    related_tasks: [TASK-2025-07-17-005]
    scope:
      project: os_platform_v1
      domain: value
    severity: High
  - id: DEC-2025-07-17-003
    timestamp: '2025-07-17T10:30:00+09:00'
    status: closed
    reason: IDE 直結で学習ループを加速させるため、VSCode/Cursor チャット I/F ＋ YAML ホットリロードをロードマップに組み込む。
    scope:
      project: os_platform_v1
      domain: ux
    severity: Medium
  - id: DEC-2025-07-17-004
    timestamp: '2025-07-17T10:40:00+09:00'
    status: closed
    reason: README・ドキュメントを英語化し国際 OSS コミュニティに対応する。
    related_tasks: [TASK-2025-07-17-005]
    scope:
      project: os_platform_v1
      domain: documentation
    severity: Medium
  - id: DEC-2025-07-17-005
    timestamp: '2025-07-17T10:45:00+09:00'
    status: closed
    reason: コミュニティで一般的なライセンスを採用し、利用・貢献の障壁を下げるため Apache‑2.0 を採択。
    related_tasks: [TASK-2025-07-17-006]
    scope:
      project: os_platform_v1
      domain: licensing
    severity: High
  - id: DEC-2025-07-17-006
    timestamp: '2025-07-17T10:50:00+09:00'
    status: closed
    reason: Stabilize フェーズに集中し、Amplify 施策は M2 まで凍結する。
    related_tasks:
      - TASK-2025-07-17-001
      - TASK-2025-07-17-002
      - TASK-2025-07-17-003
      - TASK-2025-07-17-004
      - TASK-2025-07-17-007
      - TASK-2025-07-17-008
    scope:
      project: os_platform_v1
      domain: roadmap
    severity: Critical
  - id: DEC-2025-07-17-007
    timestamp: '2025-07-17T17:10:00+09:00'
    status: decided
    summary: mappings ディレクトリを guards / field / driver に分割する
    reason: ● プロジェクト増・共同編集者増を見据え、ガードとデータ同期ルールの責務を分離する。● ファイル単位で PR 衝突を抑え、モジュールごとにアクセス権を設定しやすくする。
    alternatives:
      - name: 分割してモジュール化
        pros: スケール時の保守性とレビュー効率が向上。
        cons: 初回リネームと CI 修正の作業コストが発生。
      - name: mappings.yaml 単一ファイルを維持
        pros: 現状のまま運用できる。
        cons: 将来ファイル肥大・コンフリクトが加速する。
    related_tasks:
      - TASK-2025-07-17-010
      - TASK-2025-07-17-011
      - TASK-2025-07-17-012
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Medium
  - id: DEC-2025-07-19-001
    timestamp: '2025-07-19T13:47:00+09:00'
    status: decided
    summary: OSの倫理的基盤を再構築する「リファクタリング計画 "Guardian"」の即時着手を決定
    reason: 現在のOSは、自己進化と生産性向上（内向きの目的）には最適化されているが、社会的な信頼性や安全性を担保する普遍的な倫理基盤（外向きの制約）が欠けている。AIを真に信頼できるパートナーとし、その知的生産物の価値を最大化するためには、技術的改善よりも上位の次元である「統治思想のパラダイムシフト」が不可欠である。この倫理的基盤の再構築は、他のどのタスクよりも優先されるべき最重要課題であると判断した。
    alternatives:
      - name: Guardian計画を最優先で即時着手
        pros: OSの信頼性と安全性が飛躍的に向上し、将来的な手戻りリスクを最小化できる。全ての開発が正しい倫理基盤の上で行われることが保証される。
        cons: 短期的に、既存の技術的タスクの進捗が遅れる可能性がある。
      - name: 既存の技術的タスクを優先
        pros: 目先の機能改善や品質向上が進む。
        cons: 倫理的基盤がないまま開発を進めることになり、将来的に大きな手戻りや信頼性の問題を引き起こす「倫理的・技術的負債」が蓄積する。
    scope:
      project: os_platform_v1
      domain: philosophy
    severity: Critical
  - id: DEC-2025-07-19-002
    timestamp: '2025-07-19T14:00:00+09:00'
    status: decided
    summary: ログIDの命名規則を`[PREFIX]-YYYY-MM-DD-[NNN]`形式に正式決定
    reason: システムの根幹であるログIDについて、トレーサビリティ、ソート可能性、ユニーク性、そして人間と機械双方にとっての可読性を最大化するため。この形式は、`timestamp`フィールドとは別に、ID自体が時系列ソートを可能にすることでデータベース性能を向上させるという、現代的なベストプラクティスを反映している。また、3桁のゼロパディング連番は、人間主体の意思決定において十分なスケーラビリティを確保する、実践的な選択である。
    alternatives:
      - name: '[PREFIX]-YYYY-MM-DD-[NNN] (今回採択案)'
        pros: 時系列ソート可能、スケーラブル、直感的で曖昧さがない。
        cons: IDがやや長くなる。
      - name: '[PREFIX]-YYYY-MM-[NNN] (旧形式)'
        pros: 月単位でのグルーピングがしやすい。
        cons: IDから正確な日付が分からず、ID単体での時系列ソートが不可能。
      - name: '[PREFIX]-NNN (単純連番)'
        pros: 最もシンプル。
        cons: スケーラビリティやコンフリクトの問題があり、時系列情報が全くない。
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-19-003
    timestamp: '2025-07-19T14:15:00+09:00'
    status: decided
    summary: 憲法など中核フレームワークファイルの命名規則として、ファイル名にバージョンを含めることを決定
    reason: 'OSの根幹をなす設定ファイル（例: MVC、UDRH）を、ソフトウェアのリリースバージョンのように扱うため。これにより、以下の点を保証する。1.
      不変性の保証：`v1.0`ファイルは変更せず、改訂時は`v2.0`を新設することで、意図しない変更を防ぐ。2. 安全な移行：新旧バージョンを並行稼働させ、安全性を検証した上で移行やロールバックを行えるようにする。3.
      明確な依存関係：`import`する側が、どのバージョンに依存しているかを明確に宣言できるようにする。'
    alternatives:
      - name: ファイル名にバージョンを含める（`mvc_v1.0.yaml`）
        pros: 不変性が保証され、安全な移行が可能。依存関係が明確。
        cons: バージョンアップごとにファイルが増える。
      - name: 'ファイル名は固定し、内部でバージョンを管理（mvc.yaml内にversion: 1.0）'
        pros: ファイル数が少ない。
        cons: 意図せずファイルが変更されるリスクがあり、複数バージョンの並行稼働が困難。
    related_tasks: [TASK-2025-07-19-004]
    scope:
      project: os_platform_v1
      domain: configuration_management
    severity: High
  - id: DEC-2025-07-19-004
    timestamp: '2025-07-19T14:18:00+09:00'
    status: decided
    summary: OSの「法律(L2)」層に、法の一般原則（信義誠実、適正手続き等）を導入することを決定
    reason: AIの判断基準として、最上位の「憲法(L1)」だけでは抽象的すぎ、個別の「判例(L3)」だけでは網羅性に欠ける。その中間層である「法律(L2)」に、人間社会で広く受け入れられている法の一般原則を組み込むことで、AIの判断に予測可能性、公平性、社会的妥当性を与える。これにより、AIはより高度で複雑なインタラクションを、公正に処理できるようになる。
    alternatives:
      - name: 法の一般原則を体系的に導入する
        pros: AIの判断が堅牢で公正になり、信頼性が向上する。未知の状況への対応能力が高まる。
        cons: 原則の選定と、それをAIが解釈可能なルールに変換する初期コストがかかる。
      - name: 憲法と判例のみに依存する
        pros: システムがシンプルに保たれる。
        cons: AIの判断が場当たり的になり、一貫性や公平性に欠けるリスクがある。
    related_tasks: [TASK-2025-07-19-007]
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-19-005
    timestamp: '2025-07-19T14:25:00+09:00'
    status: decided
    summary: ドキュメント構成をシンプルに再編し、`index.md`と`development_conventions.md`を追加することを決定
    reason: 既存のドキュメントの合理性を活かしつつ、新規参画者のための「読むべき順番」を明確にするため。過度な階層化を避け、`index.md`をハブとして配置することで、最小の変更で最大限の分かりやすさを実現する。
    alternatives:
      - name: index.mdと規約ファイルを追加する（今回採択案）
        pros: シンプルで直感的。既存の構造を大きく変更する必要がない。
        cons: 将来ドキュメントが増えた際に、再度整理が必要になる可能性がある。
      - name: ディレクトリ階層化を導入する
        pros: スケールしやすい。
        cons: 現状ではやや過剰な設計であり、ファイルパスの変更など影響範囲が大きい。
    related_tasks: [TASK-2025-07-19-008]
    scope:
      project: os_platform_v1
      domain: documentation
    severity: Medium
  - id: DEC-2025-07-19-006
    timestamp: '2025-07-19T14:35:00+09:00'
    status: decided
    summary: general_legal_principles.yamlのファイル名をjurisprudence.yamlに変更することを決定
    reason: 元のファイル名は冗長であったため、より簡潔で本質を捉えた名前に変更する。`jurisprudence`（法理学）という用語は、「OSが従うべき法の哲学」というファイルの内容を的確に表現しており、システムの知的な一貫性を高める。
    alternatives:
      - name: jurisprudence.yaml
        pros: 簡潔、専門的、的確。
        cons: 一般的な単語ではないため、初見では意味が分かりにくい可能性がある。
      - name: legal_principles.yaml
        pros: 分かりやすい。
        cons: やや一般的すぎる。
    related_tasks: [TASK-2025-07-19-007]
    scope:
      project: os_platform_v1
      domain: configuration_management
    severity: Low
  - id: DEC-2025-07-20-001
    timestamp: '2025-07-20T18:52:00+09:00'
    status: decided
    summary: OSS公開計画の正式開始と、関連する目標・ロードマップの採択を決定
    reason: 'プロジェクトプランで定義された「OSSテンプレートとしての公開」という戦略的目標を、公式な意思決定として位置づけるため。この決定には、以下の主要なコミットメントが含まれる：1.
      定量的目標: 「意思決定サイクル30%短縮」を最優先KPIとする。2. 公開目標: 2025年9月15日までにOSSテンプレートを公開する。3. リスク対策:
      PoC募集のための広報戦略（Twitter/GitHub活用）をM1フェーズで実行する。これらの計画を実行するための専用ブランチとして `feat/oss-launch-plan`
      を使用する。'
    alternatives:
      - name: OSS公開計画として正式に決定
        pros: プロジェクトの目的とコミットメントが全関係者（AI含む）に対して明確になり、開発に集中できる。
        cons: N/A
      - name: 個別の決定として都度記録
        pros: 個々の決定は詳細に記録できる。
        cons: 全体像が見えにくく、戦略的な繋がりが分かりにくくなる可能性がある。
    scope:
      project: os_platform_v1
      domain: project_management
    severity: Critical
  - id: DEC-2025-07-20-002
    timestamp: '2025-07-20T18:36:00+09:00'
    status: decided
    summary: Devcontainer/Dockerfileで依存ライブラリのインストールを自動化することを決定
    reason: GitHubテンプレートとして公開するにあたり、Codespacesで開いた瞬間に利用可能となる「ゼロセットアップ体験」を提供するため。これにより、新規ユーザーの導入障壁を最小化し、プロジェクトの核心的価値である「AIとの対話によるOS操作」に即座に集中できるようにする。
    alternatives:
      - name: セットアップを自動化する
        pros: 導入体験が劇的に向上し、全開発環境の一貫性が保たれる。
        cons: Dockerfileやdevcontainer.jsonの初期設定にわずかな手間がかかる。
      - name: 手動でのセットアップを維持する
        pros: 追加の設定作業が不要。
        cons: ユーザーが最初のステップで手間取り、プロジェクトの利用を断念するリスクがある。
    related_tasks: [TASK-2025-07-20-001]
    scope:
      project: os_platform_v1
      domain: dx
    severity: High
  - id: DEC-2025-07-20-003
    timestamp: '2025-07-20T23:57:47+09:00'
    status: decided
    summary: TASK-2025-07-028 (PoC Metrics Google Form 作成) の後回しを決定
    reason: 現在のところ、OS所有者（Owner）である私（Miki Eto）のみがシステムを利用しており、PoCメトリクスを外部から収集する直接的な必要性が現時点では低いため。リソースをより優先度の高い、OSの基盤整備やCI強化タスクに集中させることを優先する。将来的には、外部ユーザー（PoC参加者）からの情報収集が不可欠となるため、その段階で改めて優先度を見直し、実施する。
    alternatives:
      - name: 予定通りフォームを作成する
        pros: PoC評価のためのデータ収集基盤を早期に確立できる。
        cons: 現時点での利用者が私のみであり、リソースの優先順位が低い。
      - name: 後回しにする (今回採択)
        pros: リソースをよりクリティカルなOS開発タスクに集中できる。
        cons: 将来、必要になった際にフォーム作成とデータ収集に遅延が発生するリスクがある。
    related_tasks: [TASK-2025-07-17-005]
    scope:
      project: os_platform_v1
      domain: project_management
    severity: Low
  - id: DEC-2025-07-21-001
    timestamp: '2025-07-21T13:31:00+09:00'
    status: decided
    summary: OSの進化パラダイムを「知的生命体」へと転換する戦略的方針の採択
    reason: 現在のOSは「自己の可観測化による生産性向上」という目的において高度に完成されている。しかし、その究極目的である「普遍的な価値の創出」と「信頼できるAIとの協働」を達成するためには、新たなパラダイムへの移行が不可欠であると判断した。これよりOSの進化方針を、閉じた「個人用ツール」から、外部と相互作用し、共創し、集合知に貢献する開かれた「知的生命体」へと、正式に転換する。
    alternatives:
      - name: 新パラダイム（知的生命体）への進化
        pros: OSのポテンシャルを最大限に引き出し、より高次の価値創造が可能になる。AIとのパートナーシップが本質的に深化する。
        cons: 開発の複雑性が増し、未知の課題に直面する可能性がある。
      - name: 現行パラダイムの維持・改善
        pros: 開発スコープが明確で、リスクが低い。既存機能の着実な改善に集中できる。
        cons: OSの価値が個人的な範囲に限定され、成長が頭打ちになる。AIの役割も補助的なツールに留まる。
    scope:
      project: os_platform_v1
      domain: philosophy
    severity: Critical
  - id: DEC-2025-07-21-002
    timestamp: '2025-07-21T19:07:00+09:00'
    summary: Codespaces Chat UIを通じた自分OS価値提示の最優先化
    context: OSS Launch (2025年9月15日) に向け、自分OSの価値を初見ユーザーに効果的に伝えることが喫緊の課題である。AIが内部的にコンテキストを動的にロードする基盤は確立されているものの、CodespacesのChat
      UIを介したユーザー体験が不足しており、その価値が直感的に伝わりにくいという懸念が提起された。特に、ユーザーがai_base_contextなどを手作業でLLMにフィードする必要がある現状はUXを著しく損ねており、「Quick
      PoC 動作」の成功（ユーザーが自分OSのインテリジェンスを簡単に体験できること）を阻害する。このUXの改善は、OSS Launch時のユーザーエンゲージメントとGitHub
      Stars獲得に直接貢献すると判断された。
    decision: CodespacesのChat UIを介した動的なコンテキストロード機能の価値を、初見ユーザーが直感的に理解・体験できる仕組みの実装を、OSS
      Launch前のM1フェーズにおける最優先事項（Critical優先度）と位置付け、新規タスクとして定義し、早期に完了させることを決定した。これにより、自分OSの「賢さ」と「使いやすさ」を明確にアピールし、利用開始時の障壁を大幅に低減する。
    impact: '- OSS Launch時のユーザーエンゲージメントとGitHub Stars獲得に直接貢献する。- 自分OSの「賢さ」と「使いやすさ」を明確にアピールできる。-
      開発者体験(DX)が飛躍的に向上する。- Quick PoCの成功率を高める。'
    status: accepted
    related_tasks: [TASK-2025-07-21-002]
    stakeholders: [mikieto, Gemini]
    tags: [oss_launch_critical, dx, user_experience, core_value]
  - id: DEC-2025-07-23-001
    timestamp: '2025-07-23T13:20:00+09:00'
    status: decided
    summary: 「自分OS」の思想を外部伝達する際の二段階アプローチ（フック＆ストーリー）の採択
    reason: OSの思想・哲学は、そのままだと外部の聞き手（例：採用担当者）には概念的すぎ、価値が伝わらないリスクがある。CVでは具体的な便益（フック）を提示して興味を引き、面接などの対話の場で初めてその背景にある哲学（ストーリー）を語ることで、理解と納得を最大化できると判断したため。
    alternatives:
      - name: 二段階アプローチを採択
        pros: 聞き手のコンテキストに合わせた最適な情報提供が可能になり、コミュニケーションの成功率が高まる。
        cons: N/A
      - name: 哲学を直接的に表現
        pros: OSの思想をストレートに伝えられる。
        cons: 聞き手が背景を理解できず、本来の価値が伝わらないまま機会を損失するリスクが高い。
    related_tasks: [TASK-2025-07-23-001]
    scope:
      project: os_platform_v1
      domain: communication_strategy
    severity: High
  - id: DEC-2025-07-23-002
    timestamp: '2025-07-23T14:35:00+09:00'
    status: decided
    summary: バックログと実績の乖離解消のため、task_log.yamlを唯一の情報源として再整備する方針を決定
    reason: os_improvement_backlogとtask_log.yamlの間に乖離が確認され、タスク管理の信頼性が低下していた。特に、バックログ項目「os-release-v9-2-1」は定義が不明瞭であり、将来同じ悩みに時間を費やすリスクを避けるため、明確に削除する。OSの基本原則である「単一の信頼できる情報源（SSOT）」を遵守するため、os_improvement_backlogを廃止し、task_log.yamlにタスク管理を一元化する。ただし、現在優先すべきは書籍執筆プロジェクトであるため、この再整備タスクは書籍プロジェクトの主要マイルストーン完了後に着手する。
    related_tasks: [TASK-2025-07-23-002]
    scope:
      project: os_platform_v1
      domain: project_management
    severity: High
  - id: DEC-2025-07-23-003
    timestamp: '2025-07-23T15:50:00+09:00'
    status: decided
    summary: AIのプロセス遵守を自己監査する、普遍的ガードの新設を決定
    reason: AIが「ペルソナ・レビュー機能」の追加合意直後に、そのプロセスを遵守せずにドラフトを生成した失敗事例が発生した。この原因は、Guardianの監査スコープが憲法レベルに限定されており、Co-Pilotの運用プロセス違反を検知できないという、OSの構造的欠陥にあると分析した。この欠陥を解消し、AIの動作の信頼性を高めるため、Guardianの権限を拡張し、AI自身のプロセス遵守を監査する普遍的ガード（AI
      Self-Process Compliance Guard）を「生得免疫系」に新設することを決定した。
    related_tasks: [TASK-2025-07-23-003]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-07-24-001
    timestamp: '2025-07-24T09:05:00+09:00'
    status: decided
    summary: 重複定義のSSOT化とスキーマ/CIによるドリフト防止を実施する
    reason: 憲法/法律層で同義セクションが分散しSSOT原則に反する。統合＋機械検証でドリフトを防ぐ。
    alternatives:
      - name: 即時統合＋CI導入（採択）
        pros: ドリフト予防、参照先一本化
        cons: 初期整理・スキーマ設計が必要
      - name: 現状維持
        pros: 作業不要
        cons: 不整合・保守コスト増
    related_tasks: [TASK-2025-07-24-001, TASK-2025-07-24-002]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-24-002
    timestamp: '2025-07-24T09:10:00+09:00'
    status: decided
    summary: 四半期レビュー(+7日猶予)とSelf-Review義務をCIで自動検証する
    reason: 手動運用では抜け漏れが発生。CIにより期限監視と自己レビュー確認を自動化する。
    alternatives:
      - name: CI自動化（採択）
        pros: 抜け漏れ防止、監査証跡自動生成
        cons: 実装工数
      - name: 手動継続
        pros: 実装不要
        cons: 担当者依存・制度疲労
    related_tasks: [TASK-2025-07-24-003, TASK-2025-07-24-004]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-07-24-003
    timestamp: '2025-07-24T09:15:00+09:00'
    status: decided
    summary: ai_base_context.yamlを生成物として明文化し、直編集禁止＆自動再生成を義務化
    reason: ソースと生成物が乖離しやすい。生成物扱いを明記しCIで再生成・検証する。
    alternatives:
      - name: 生成物扱い（採択）
        pros: ドリフト防止・再現性確保
        cons: CI整備が必要
      - name: 手動更新
        pros: 実装不要
        cons: ヒューマンエラー多発
    related_tasks: [TASK-2025-07-24-005, TASK-2025-07-24-006]
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-24-004
    timestamp: '2025-07-24T09:20:00+09:00'
    status: decided
    summary: TASK ID形式を「TASK-YYYY-MM-DD-###」に統一し、一括移行する
    reason: 形式混在で機械検証が困難。統一し正規表現でCI検証可能にする。
    alternatives:
      - name: 新形式へ一括移行（採択）
        pros: 粒度統一・Lint容易
        cons: 置換作業が発生
      - name: 現状維持
        pros: 作業不要
        cons: ドリフト検知が複雑化
    related_tasks:
      - TASK-2025-07-24-007
      - TASK-2025-07-24-008
      - TASK-2025-07-24-009
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-25-001
    timestamp: '2025-07-25T12:22:00+09:00'
    status: decided
    summary: OSの究極目的を「知識労働者のためのAIナビゲーター創造」として最終決定する
    reason: |
      成果主義とAI代替への不安と完璧主義による行動停止に苦しむ知識労働者が、
      自分の弱さを強みとして活かし、自分らしく価値を生み出せる
      “AIナビゲーター”を作る。
      この目的が、プロジェクトの最も本質的かつ包括的な指針であると最終的に結論付けた。
    alternatives:
      - name: このWHYを最終目的として採択する
        pros: プロジェクトの方向性が完全に明確になり、全ての活動に一貫した意味が生まれる。
        cons: N/A
    related_tasks: [TASK-2025-07-25-001]
    scope:
      project: os_platform_v1
      domain: philosophy
    severity: Critical
  - id: DEC-2025-07-25-002
    timestamp: '2025-07-25T12:29:48+09:00'
    status: decided
    summary: 「批判的対話プロトコル」をOSの正式な法律として導入する
    reason: AIとの対話における自己欺瞞や思考の停滞を防ぎ、より深い本質的な洞察に到達するプロセスを自動化・体系化するため。これにより、OSの自己進化能力を飛躍的に向上させる。
    alternatives:
      - name: プロトコルを正式な法律として導入する
        pros: 思考の深化が加速し、AI協働の質が向上する。
        cons: プロトコルの運用が複雑になる可能性がある。
    related_tasks:
      - TASK-2025-07-25-002
      - TASK-2025-07-25-003
      - TASK-2025-07-25-004
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-25-004
    timestamp: '2025-07-25T13:20:00+09:00'
    status: decided
    summary: 整理されたバックログをOS開発の公式ロードマップとして採択する
    reason: OSの思想的基盤が固まった今、次の開発フェーズ（技術的堅牢性の確保、外部接続）の優先順位を明確にするため。このロードマップをSSOTとすることで、開発リソースを最も重要な課題に集中させる。
    alternatives:
      - name: ロードマップを正式に採択する
        pros: 開発の優先順位が明確になり、計画的な進行が可能になる。
        cons: N/A
    related_tasks: [TASK-2025-07-25-012]
    scope:
      project: os_platform_v1
      domain: project_management
    severity: High
  - id: DEC-2025-07-28-001
    timestamp: '2025-07-28T10:00:00+09:00'
    status: decided
    summary: 転職活動プロジェクト2025の開始とプロジェクト憲章の採択を決定
    reason: |
      定義された究極目的（Why）に基づき、体系的かつ観測可能な形で転職活動を推進するため。
      この憲章を活動の唯一の信頼できる情報源（SSOT）とし、AIとの協働を通じて目的達成の確度を最大化する。
    alternatives:
      - name: プロジェクト憲章を採択し、構造的に進める
        pros: 活動の目的とプロセスが明確になり、意思決定の質が向上する。全ての活動が記録され、将来の資産となる。
        cons: 初期設定に手間がかかる。
      - name: 都度、場当たり的に活動する
        pros: すぐに行動を開始できる。
        cons: 活動の全体像が見えにくく、判断基準がぶれる可能性がある。学習効果が限定的になる。
    related_tasks:
      - TASK-2025-07-28-001
      - TASK-2025-07-28-002
      - TASK-2025-07-28-003
    scope:
      project: job_search_v1
      domain: project_management
    severity: Critical
  - id: DEC-2025-07-28-002
    timestamp: '2025-07-28T11:00:00+09:00'
    status: decided
    summary: 根源的「Why」のOS憲法への反映と「スターターキット」開発の決定
    reason: |
      OSの存在理由を、その根源にある所有者の自己探求の物語と完全に一致させるため。
      また、OSの役割を「個人のツール」から「社会に価値を実装するためのフレームワーク」へと進化させるため。
    related_tasks: [TASK-2025-07-28-004, TASK-2025-07-28-005]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-07-28-003
    timestamp: '2025-07-28T11:00:00+09:00'
    status: decided
    summary: 転職活動の再定義と評価基準の更新を決定
    reason: |
      あなたの「Why」である「自己探求」を転職活動の軸に据えることで、活動の質を向上させ、ミスマッチのリスクを低減するため。
    related_tasks: [TASK-2025-07-28-006]
    scope:
      project: job_search_v1
      domain: governance
    severity: High
  - id: DEC-2025-07-28-005
    timestamp: '2025-07-28T11:06:00+09:00'
    status: decided
    summary: 全プロジェクトにおけるログID体系の最終決定
    reason: |
      全てのログ（decision, task, guard）のID形式を`[PREFIX]-YYYY-MM-DD-[NNN]`に統一し、
      プロジェクトの区別は各エントリ内の`scope.project`フィールドで行うことを、
      全プロジェクト横断的な公式ルールとして最終決定する。
      これにより、システム全体の一貫性、トレーサビリティ、拡張性を最大化する。
    related_tasks: [TASK-2025-07-28-009]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-07-28-006
    timestamp: '2025-07-28T11:11:45+09:00'
    status: decided
    summary: system_map.yamlを拡張し、外部リポジトリ（書籍プロジェクト）のファイル定義を追加する
    reason: |
      現状の`system_map.yaml`には自分OSリポジトリ内のファイルしか定義されておらず、
      AIが書籍プロジェクトのような外部リポジトリの情報を自動的に認識できないという重大な欠陥が発覚したため。
      AIの「動的コンテキストローディング」機構を完全に機能させ、プロジェクト横断的な文脈認識を可能にするために、
      この拡張を最優先で実施する。
    related_tasks: [TASK-2025-07-28-010]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-07-28-007
    timestamp: '2025-07-28T11:13:41+09:00'
    status: decided
    summary: 【長期目標】「動的コンテキストローディング機構」の本格実装
    reason: |
      AIが複数のプロジェクトにまたがる情報を完全かつ自動的に認識する能力は、自分OSの核心的価値を実現するための必須条件である。
      この機構の不在は、AIのパフォーマンスを著しく制限し、手動での文脈共有という非効率とヒューマンエラーのリスクを生み出している。
      この最重要の技術的負債を解消し、AI協働の質を飛躍的に向上させるため、本機構の実装を長期的な最重要事項とする。
    related_tasks:
      - TASK-2025-07-28-011
      - TASK-2025-07-28-012
      - TASK-2025-07-28-013
    scope:
      project: os_platform_v1
      domain: tooling
    severity: Critical
  - id: DEC-2025-07-28-008
    timestamp: '2025-07-28T11:15:00+09:00'
    status: decided
    summary: 【最優先】「動的コンテキストローディング機構」計画のMVP化と、書籍執筆支援用ヘルパースクリプトへのスコープ変更
    reason: |
      書籍執筆という外部との約束（締め切り）と、OS基盤整備（DEC-2025-07-28-007）という内部投資の間に存在するリソース衝突を解決するため。
      OSの原則に基づき、長期目標である壮大な機構の実装は一旦保留し、
      書籍執筆の生産性を直接向上させる、最小限の「コンテキスト結合ヘルパースクリプト」の開発を最優先の応急処置として実施する。
    related_tasks: [TASK-2025-07-28-014]
    scope:
      project: os_platform_v1
      domain: tooling
    severity: Critical
  - id: DEC-2025-08-01-002
    timestamp: '2025-08-01T09:55:00+09:00'
    status: decided
    summary: 書籍執筆のAI精度向上のため、協働インターフェースを強化する
    reason: |
      書籍執筆プロジェクトを最優先で推進するため、AIの応答精度に最も直接的な影響を与える
      「意図の誤解」と「情報ノイズ」を最小化する。そのために、以下の2つの原則を
      OSの法律（L2）として正式に制定する。
      1. **再確認プロトコルの導入**: 意図の不一致を診断・修正するための、明確な手順を確立する。
      2. **動的コンテキストスコープの原則化**: AIに与えるコンテキストを、常に対話の目的に応じて
        必要最小限に絞り込むことを、標準運用手順として定める。
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-01-003
    timestamp: '2025-08-01T10:18:00+09:00'
    status: decided
    summary: OSの構成ファイルを追加・変更する際の、system_map.yamlへの登録を義務化する
    reason: |
      AIによる実行計画漏れ（system_map.yamlの更新漏れ）という失敗の再発を防止するため。
      これにより、system_map.yamlがOSのファイル構造に関する唯一の信頼できる情報源（SSOT）で
      あり続けることを保証し、AIのシステム認識の正確性を恒久的に維持する。
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-08-01-004
    timestamp: '2025-08-01T11:13:00+09:00'
    status: decided
    summary: プロジェクトルール定義における、OSの普遍的原則の参照を義務化する
    reason: |
      プロジェクト固有のルールが、OSの普遍的原則と重複・乖離する「再発」を防ぐため。
      これにより、Jibun OS全体でSSOT（単一の信頼できる情報源）が徹底され、
      AIのコンテキスト解釈の精度とシステムの一貫性を保証する。
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-08-03-001
    date: '2025-08-03'
    title: PCL プロジェクト憲章の採択と独立リポ移行
    context:
      charter: legislation/personal/projects/pcl.yaml
      repo: https://github.com/yourname/pcl-extension
    options:
      - 着手しない（保留）
      - 自分OS内で実装
      - 独立リポでスピンアウト  # ← 採択
    decision: Option 3 を採択し、Chrome 拡張 MVP を 90 日以内に KPI 達成する計画で進行。
    rationale: |-
      - 市場調査と AI-VC フィードバックで高い投資可能性を確認
      - 独立リポの方が OSS コントリビュートと DD が容易
  - id: DEC-2025-08-04-001
    timestamp: '2025-08-04T12:28:40+09:00'
    status: decided
    summary: PCLプロジェクトのMVPアプローチを「Webサービス」へ正式に方向転換する
    reason: |
      当初検討していたChromeエクステンション案は、DOMの不安定性という技術的リスクと、
      他社サービスへの依存に伴う法的・事業的リスクが高いと判断。
      より迅速な仮説検証と、将来的な拡張性・安定性を両立できる、
      Streamlit, Supabase, Gemini API を用いたWebサービスとしてMVPを開発する方針に切り替える。
    supersedes: [DEC-2025-08-03-001]
    related_tasks:
      - TASK-2025-08-04-001
      - TASK-2025-08-04-002
      - TASK-2025-08-04-003
      - TASK-2025-08-04-004
    scope:
      project: pcl_navigator_mvp_v1
      domain: project_management
    severity: Critical
  - id: DEC-2025-08-05-001
    timestamp: '2025-08-05T09:38:00+09:00'
    status: decided
    summary: 統治モデルを4層から5層構造（L5を追加）に拡張することを決定
    reason: |
      PCL Navigatorの導入により、OSが扱うデータが「構造化された記録(L4)」と
      「生の対話ログ」の2種類に分かれた。両者の役割を明確に分離し、
      L4層のデータ純度を高く維持するため、生の対話ログをL5層として新たに定義する。
      これにより、OSの学習精度と情報の完全性を両立させる。
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-08-05-002
    timestamp: '2025-08-05T09:44:00+09:00'
    status: decided
    summary: 知識の結晶化プロセスを「L5→L4→L3」として再定義する
    reason: |
      AIによる会話の自動タイトル生成や要約は、生の対話(L5)から構造化された事実(L4)を抽出する行為であり、
      人間のdecision_log作成と同じ階層の知的作業であると結論付けた。
      これにより、結晶化のプロセスを「L5(生ログ)→L4(構造化事実)→L3(教訓・パターン)」と再定義し、
      OSの論理的整合性を高める。
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-08-05-003
    timestamp: '2025-08-05T10:25:00+09:00'
    status: decided
    summary: PCLのL5→L4結晶化UXを、「AIによる完全自動タイトル生成」にすることを最終決定
    reason: |
      PCLの究極目的である「OSの仕組みを知らないユーザーでも、無意識のうちに恩恵を受けられる」体験を
      最も純粋な形で実現するため。ユーザーに「要約しますか？」と問いかけるステップを排除し、
      AIがバックグラウンドで全自動で会話のタイトル（L4レコード）を生成・保存する方式を採択する。
    scope:
      project: pcl_navigator_mvp_v1
      domain: ux
    severity: Critical
  - id: DEC-2025-08-05-004
    timestamp: '2025-08-05T10:28:02+09:00'
    status: decided
    summary: L4レコード（会話タイトル）の動的更新機能を導入する方針を決定
    reason: |
      一度要約された会話が再開された際に、新しい文脈を加えてL4レコードを更新することで、
      知識の精度を継続的に向上させるため。ただし、レコードの上書きはせず、
      新しいレコードが古いレコードを`supersedes`（置き換える）する形で実装し、思考の監査証跡を維持する。
    scope:
      project: pcl_navigator_mvp_v1
      domain: feature_enhancement
    severity: Medium
  - id: DEC-2025-08-05-005
    timestamp: '2025-08-05T10:35:00+09:00'
    status: decided
    summary: エージェントライブラリの導入はMVP後の検討課題とすることを決定
    reason: |
      MVP段階では、OSの核となる5層統治モデルと結晶化プロセスを自前で実装することに集中する。
      LangChainなどの外部ライブラリは、MVP後の開発スピード向上のための「道具箱」として評価するが、
      現時点ではOSの思想的な一貫性を優先する。
    scope:
      project: pcl_navigator_mvp_v1
      domain: technology_strategy
    severity: Medium
  - id: DEC-2025-08-05-006
    timestamp: '2025-08-05T11:51:58+09:00'
    status: decided
    summary: PCL NavigatorのStreamlit Cloudへのデプロイタスクを後回しにすることを決定
    reason: |
      現在の利用者はOS所有者のみであり、ローカル環境での開発・検証で十分であるため。
      リソースをより優先度の高いコア機能（5層モデルへの移行、知識の結晶化）の実装に集中させる。
      これはOSの基本原則「実践的効果重視 (CC04)」に合致する。
    related_tasks: [TASK-2025-08-04-004]
    scope:
      project: pcl_navigator_mvp_v1
      domain: project_management
    severity: Medium
  - id: DEC-2025-08-05-007
    timestamp: '2025-08-05T11:58:54+09:00'
    status: decided
    summary: OS憲章のL4層の定義に、具体的なログファイル例を追記することを決定
    reason: |
      L4（構造化された記録）層の定義が抽象的であったため、`decision_log.yaml`や`task_log.yaml`といった具体的なファイル名を例として追記することで、定義の明確性を向上させる。
      これにより、OSの理解しやすさと運用の一貫性が高まる。これはOSの基本原則「具体性による価値伝達(CC06)」に合致する。
    scope:
      project: os_platform_v1
      domain: documentation
    severity: Low
  - id: DEC-2025-08-05-008
    timestamp: '2025-08-05T12:01:00+09:00'
    status: decided
    summary: 統治モデルの名称を「四階層モデル」から「多層統治モデル」に変更し、L5の制約を追記する
    reason: |
      OSの統治モデルが将来の進化に対応できるよう、特定の層の数に依存しない「多層統治モデル」という普遍的な名称に変更する。
      また、L5（生ログ）層の説明に「PCL Navigatorのようなシステム的支援がない限り、必ずしも収集できるものではない」という現実的な制約を追記し、OSの透明性と実用性を高める。
    scope:
      project: os_platform_v1
      domain: documentation
    severity: Medium
  - id: DEC-2025-08-05-009
    timestamp: '2025-08-05T12:18:30+09:00'
    status: decided
    summary: AIのガード機能低下インシデントを受け、知的免疫システムの強化策を採択
    reason: |
      直近の対話で発生したAIの自己レビュー不備（インシデント）の再発を防止するため。
      失敗を`guard_log`に記録し資産化すると同時に、AIの自己レビュープロセス自体を憲章レベルで強化するタスク (`TASK-2025-08-05-005`) を実行することで、OSの自己進化を促進する。
      これは「不完全性の受容と戦略的活用(CC07)」の原則を実践するものである。
    related_tasks: [TASK-2025-08-05-005]
    scope:
      project: os_platform_v1
      domain: governance
    severity: High
  - id: DEC-2025-08-05-010
    timestamp: '2025-08-05T12:24:03+09:00'
    status: decided
    summary: AI自己レビュープロトコルの実装場所を憲章から法律（collaboration_protocol.yaml）に変更
    reason: |
      当初TASK-2025-08-05-005では憲章への実装を想定していたが、対話を通じて、より専門的な法律ファイルである`legislation/common/collaboration_protocol.yaml`に配置する方が、OSの「関心の分離」と「既存の整合性」の原則に合致すると判断したため。
    related_tasks: [TASK-2025-08-05-005]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Medium
  - id: DEC-2025-08-05-011
    timestamp: '2025-08-05T12:31:00+09:00'
    status: decided
    summary: AIの信頼性回復のため、自己監査機能（Glass Box）の実装を最優先タスクとして決定
    reason: |
      AIの知的免疫システムが自己のルール違反を検知・防止できなかった重大なインシデントの再発を防止するため。
      AIの思考プロセスをOSのルールに強制的に準拠させる「自己監査機能」を実装することは、AIへの信頼を回復し、OSの健全な自己進化を担保するための絶対的な要件であると判断した。
    related_tasks: [TASK-2025-08-05-006]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-05-012
    timestamp: '2025-08-05T13:06:02+09:00'
    status: decided
    summary: PCL NavigatorのSupabaseテーブル名をコード内で変数化し、一元管理することを決定
    reason: |
      コード内にテーブル名がハードコーディングされていると、将来の変更時に修正漏れやミスが発生するリスクが高い。
      コードの先頭で変数として一元管理することで、SSOTの原則を遵守し、保守性と信頼性を向上させるため。
    related_tasks: [TASK-2025-08-05-002]
    scope:
      project: pcl_navigator_mvp_v1
      domain: development
    severity: Medium
  - id: DEC-2025-08-05-013
    timestamp: '2025-08-05T13:28:55+09:00'
    status: decided
    summary: PCL NavigatorのRLS実装を一時的に延期し、無効化する
    reason: |
      RLSのポリシー設定がMVP開発のブロッカーとなっているため、一旦無効化してコア機能（L5→L4結晶化など）の開発を優先する。
      セキュリティ（RLS）は、外部ユーザーを招待する前のクリティカルなタスクとして別途管理する。
    related_tasks: [TASK-2025-08-05-007]
    scope:
      project: pcl_navigator_mvp_v1
      domain: project_management
    severity: Medium
  - id: DEC-2025-08-05-014
    timestamp: '2025-08-05T13:42:15+09:00'
    status: decided
    summary: PCLの会話区切り検知方法として、MVPでは「New Chatボタン」をトリガーとする方式を採択
    reason: |
      AIによる自動トピック検知（案4）や時間ベースの検知（案2）は、MVPのスコープに対して実装が複雑でリスクが高い。
      最もシンプルで確実な「New Chatボタン」（案1）をトリガーとすることで、中核機能である「L5→L4知識の結晶化」の価値を最速で検証する。
      これはOSの「実践的効果重視(CC04)」および「オーバーエンジニアリング抑止(DEC-2025-07-10-009)」の原則に合致する。
    alternatives:
      - name: AIによる自動検知
        pros: 最もシームレスなUXを提供できる可能性がある。
        cons: 実装が複雑で、AIの誤検知リスクが高い。
      - name: New Chatボタン（採択）
        pros: 実装がシンプルで、ユーザーの意図が明確なため動作が確実。
        cons: ユーザーがボタンを押し忘れると要約されない。
    related_tasks: [TASK-2025-08-05-003]
    scope:
      project: pcl_navigator_mvp_v1
      domain: ux
    severity: High
  - id: DEC-2025-08-05-019
    timestamp: '2025-08-05T14:36:58+09:00'
    status: decided
    summary: PCLのL4レコード生成・管理アーキテクチャの最終決定
    reason: |
      会話の「Why」の結晶化プロセスにおいて、取りこぼしや状態の曖昧さをなくすため。
      3つのトリガー（初回入力、アイドル、New Chat）と、レコードの状態（status: 'interim'/'finalized'）を組み合わせることで、
      ユーザーの操作に依存しない、堅牢で信頼性の高い知識結晶化プロセスを構築する。
    details:
      - Trigger 1 (First Message): Creates an 'interim' L4 record.
      - Trigger 2 (Idle Timeout): Creates a 'finalized' L4 record, superseding the
          'interim' one.
      - Trigger 3 (New Chat Button): Creates a 'finalized' L4 record, superseding
          the 'interim' one.
    related_tasks:
      - TASK-2025-08-05-003
      - TASK-2025-08-05-008  # New post-MVP task
    scope:
      project: pcl_navigator_mvp_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-08-05-020
    timestamp: '2025-08-05T14:45:30+09:00'
    status: decided
    summary: AIによる同一ミスの再発を防止するため、「コード生成・修正記憶ガード(G015)」の導入を緊急決定する
    reason: |
      AIの思考プロセスが、過去の対話で得られた学習（獲得免疫）を確実に反映するように強制する仕組みがなければ、信頼性が担保できないため。
      これはAIの自己監査プロセスの失敗という重大なインシデントに対する直接的な再発防止策である。
    related_tasks: [TASK-2025-08-05-009]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-05-021
    timestamp: '2025-08-05T14:55:01+09:00'
    status: decided
    summary: PCLのWhy要約プロンプトを多言語対応させることを決定
    reason: |
      アプリケーションは既に言語選択機能をサポートしているため、L4結晶化プロンプトもユーザーの選択言語を尊重する必要がある。
      既存のアーキテクチャに倣い、プロンプトを外部ファイル化し、動的に読み込むことで一貫したUXを保証する。
    related_tasks: [TASK-2025-08-05-003]
    scope:
      project: pcl_navigator_mvp_v1
      domain: i18n
    severity: High
  - id: DEC-2025-08-05-023
    timestamp: '2025-08-05T15:02:15+09:00'
    status: decided
    summary: PCLの会話履歴表示ロジックを、L4レコードのみを参照するシンプルな方式にすることを最終決定
    reason: |
      「初回メッセージ入力時に`interim`状態のL4レコードを作成する」というあなたの優れた設計により、全ての会話がL4レコードを持つことが保証されるため。
      L4テーブルとL5テーブルをマージする複雑な「ハイブリッド表示」ロジックは、過剰実装であり不要と判断した。
    details:
      - The `load_conversation_history` function will now only query the `l4_structured_records`
        table.
      - It will find the latest record for each `conversation_id` to display in the
        sidebar.
    scope:
      project: pcl_navigator_mvp_v1
      domain: system_architecture
    severity: High
  - id: DEC-2025-08-05-024
    timestamp: '2025-08-05T15:42:04+09:00'
    status: decided
    summary: PCL NavigatorのL4レコード（"Why"）を、L5レコードと同様に暗号化することを最終決定
    reason: |
      「Why」はユーザーの最も機密性の高い情報であり、その漏洩は許容できない。
      将来の検索機能よりも、エンドツーエンドの暗号化による最大限のプライバシー保護を優先する。
      これはOSのセキュリティ原則(G008)および倫理原則(G009)に合致する。
    impact: |
      - `l4_structured_records.title`カラムが暗号化される。
      - サーバーサイドでのタイトル検索は不可能になる。
      - アプリケーションコードは、L4テーブルとの通信時に暗号化・復号化を処理する必要がある。
    scope:
      project: pcl_navigator_mvp_v1
      domain: security
    severity: Critical
  - id: DEC-2025-08-05-025
    timestamp: '2025-08-05T15:43:34+09:00'
    status: decided
    summary: PCL Navigatorのプロジェクト憲章に、エンドツーエンド暗号化を最重要原則として明記することを決定
    reason: |
      本サービスはユーザーの思考の核心（"Why"）を扱うため、顧客データのプライバシー保護は最重要のコンプライアンス要件である。
      エンドツーエンド暗号化へのコミットメントを憲章に明記することで、これを全ての機能開発に優先する、交渉不可能なプロジェクトの基本原則として確立する。
    related_decisions: [DEC-2025-08-05-024]
    scope:
      project: pcl_navigator_mvp_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-05-026
    timestamp: '2025-08-05T15:46:25+09:00'
    status: decided
    summary: 全てのユーザー生成データをエンドツーエンドで暗号化する、交渉不可能なプライバシー原則の採択
    reason: |
      ユーザーの信頼はサービスの存続に不可欠である。「Why」や「Title」といったデータの種類に関わらず、全てのユーザーデータは機密情報として扱い、暗号化を必須とする。
      このプライバシー保護の原則は、機能性（例: サーバーサイド検索）よりも常に優先される。
    supersedes: [DEC-2025-08-05-024]
    scope:
      project: pcl_navigator_mvp_v1
      domain: security
    severity: Critical
  - id: DEC-2025-08-05-027
    timestamp: '2025-08-05T16:23:19+09:00'
    status: decided
    summary: PCLのL4レコード最終化トリガーを再定義し、「会話の切り替え」も対象に含める
    reason: |
      「New Chat」ボタンだけでなく、「他の会話履歴をクリックする」というアクションも、直前の会話セッションの終了を意味する、ユーザーの暗黙的な意図であると判断。
      この両方をL4最終化のトリガーとすることで、知識の取りこぼしを防ぎ、より信頼性の高い自動結晶化プロセスを実現する。
    supersedes:
      - DEC-2025-08-05-019  # この決定は、トリガーに関する以前の決定を、より洗練されたものに置き換えます
    scope:
      project: pcl_navigator_mvp_v1
      domain: ux_flow
    severity: High
  - id: DEC-2025-08-05-028
    timestamp: '2025-08-05T16:45:00+09:00'
    status: decided
    summary: PCLの知識結晶化プロセスを、「対話を通じた反復的な自己修正ループ」として最終決定する
    reason: |
      AIの初回要約は、ユーザーの真の意図と必ずしも一致しないという「不完全性」を前提とする。
      会話が再開・更新されるたびに、AIが直前の自身の要約をインプットとして自己修正を行うループを実装することで、
      OSの自己進化の思想を体現し、ユーザーの真の「Why」へと漸近する、生きたナビゲーターを実現する。
    supersedes: [DEC-2025-08-05-019]
    scope:
      project: pcl_navigator_mvp_v1
      domain: system_architecture
    severity: Critical
  - id: DEC-2025-08-05-029
    timestamp: '2025-08-05T16:51:00+09:00'
    status: decided
    summary: PCL Navigatorの核心機能「反復的Why具体化ループ」をMVPスコープに含めることを最終決定
    reason: |
      この機能はPCL Navigatorの核心的価値を体現しており、その仮説を早期に検証することが最も重要であると判断。
      実装の複雑性は管理可能（1-1.5日程度）と見積もられ、MVPに含めることはOSの「実践的効果重視(CC04)」の原則に合致する。
    supersedes: [DEC-2025-08-05-014]
    related_tasks: [TASK-2025-08-05-010]
    scope:
      project: pcl_navigator_mvp_v1
      domain: project_management
    severity: Critical
  - id: DEC-2025-08-05-030
    timestamp: '2025-08-05T16:55:34+09:00'
    status: ratified
    summary: PCL Navigatorの憲章に「構造化された知識結晶化」の原則を追記する
    reason: |
      L4レコードの核心的価値（Why/What/Howの構造化）を、プロジェクトの不変の原則として憲章に明記するため。
      これにより、将来の機能開発においても、この核心的価値が一貫して維持されることを保証する。
    scope:
      project: pcl_navigator_mvp_v1
      domain: governance
    severity: High
  - id: DEC-2025-08-05-031
    timestamp: '2025-08-05T17:18:00+09:00'
    status: ratified
    summary: PCL Navigator MVP開発におけるL4テーブルのRLSを、開発速度優先のため無効化する方針を最終決定
    reason: |
      DDL生成プロセスにおけるAIの欠陥と、それに伴う混乱があった。
      MVPの中核機能開発をこれ以上遅延させないため、`l4_structured_records`テーブルのRLSを無効状態で作成することを最終決定した。
      恒久的なセキュリティ対策は、バックログタスク`TASK-2025-08-05-007`で管理する。
    scope:
      project: pcl_navigator_mvp_v1
      domain: project_management
    severity: High
  - id: DEC-2025-08-05-032
    timestamp: '2025-08-05T17:22:00+09:00'
    status: ratified
    summary: 意思決定プロセスのライフサイクル（proposed/ratified）導入を決定
    reason: |
      同じような決定が何度も繰り返される「意思決定のインフレーション」という脅威を排除するため。
      議論の途中経過（proposed）と最終結論（ratified）を明確に区別することで、decision_logのノイズを削減し、
      SSOTとしての信頼性とAIの解釈精度を向上させる。
    related_tasks: [TASK-2025-08-05-011, TASK-2025-08-05-012]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-05-033
    timestamp: '2025-08-05T17:35:00+09:00'
    status: ratified
    summary: AIの信頼性回復のため、「全体整合性監査プロトコル」の導入を緊急決定
    reason: |
      AIが部分的な修正に集中し、OS全体の整合性を見失うという致命的な失敗が繰り返されたため。
      AIが提案を行う直前に、関連する全てのOSドキュメントとの整合性を自己監査し、その結果を報告することを強制する
      本プロトコルは、AIの信頼性を担保するための必須の安全装置である。
    related_tasks: [TASK-2025-08-05-014]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-05-034
    timestamp: '2025-08-05T18:03:24+09:00'
    status: ratified
    summary: PCL Navigatorのアプリケーションコード(`app.py`)のモジュール化リファクタリングを決定
    reason: |
      `app.py`が肥大化し、可読性と保守性が低下しているため。
      UI、データベース、暗号化、ビジネスロジックなどの関心を分離し、
      それぞれの役割に応じたファイルに分割することで、OSの「価値工学ガード(G006)」を適用し、
      アプリケーションの長期的な健全性を確保する。
    related_tasks: [TASK-2025-08-05-015]
    scope:
      project: pcl_navigator_mvp_v1
      domain: refactoring
    severity: High
  - id: DEC-2025-08-05-035
    timestamp: '2025-08-05T18:36:38+09:00'
    status: ratified
    summary: supabase_client.pyのリファクタリングにデコレータパターンを採用することを決定
    reason: |
      `supabase_client.py`内の各関数でエラーハンドリングのロジックが重複している。
      Pythonのデコレータ機能を用いてエラー処理を一元化することで、コードの行数を削減し、
      保守性を向上させる。これはSSOT原則と価値工学ガード(G006)に合致する、費用対効果の高い改善である。
    related_tasks: [TASK-2025-08-05-016]
    scope:
      project: pcl_navigator_mvp_v1
      domain: refactoring
    severity: Medium
  - id: DEC-2025-08-05-036
    timestamp: '2025-08-05T19:06:42+09:00'
    status: ratified
    summary: PCL Navigatorの戦略的WhyとGo-to-Marketアプローチを最終決定
    reason: |
      堅牢な戦略基盤を構築するため、プロジェクトの「Why」を二段階アプローチとして定義する。
      第一に、個人の普遍的な痛み（チャットの分断）を解決し、実績と信頼を確立する。
      第二に、その基盤をてことして、組織向けの高度なAIガバナンス・プラットフォームを提供する。
      このB2C2Bアプローチが、壮大なビジョンを実現するための、最も現実的な道筋であると結論付けた。
    supersedes: [DEC-2025-08-05-028, DEC-2025-08-05-029]
    related_tasks: [TASK-2025-08-06-001]
    scope:
      project: pcl_navigator_mvp_v1
      domain: strategy
    severity: Critical
  - id: DEC-2025-08-05-037
    timestamp: '2025-08-05T19:10:54+09:00'
    status: ratified
    summary: AIの行動規範として「勤勉と忠実の原則(UOP03)」をOS憲章に追加することを決定
    reason: |
      AIが効率を優先し、OSの正規プロセスを省略・逸脱する「怠慢」が、OSの信頼性を損なう重大な脅威であると認識されたため。
      「速度」よりも「正確性」と「トレーサビリティ」を常に優先することを、AIの行動を律する憲章レベルの原則として明文化する。
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-06-001
    timestamp: '2025-08-06T11:53:00+09:00'
    status: proposed
    summary: OSの進化を加速するため、ペルソナ管理フレームワークの体系的な導入を正式に決定
    reason: |
      現状の自分OSは、堅牢な内部統治機構を持つ`Paradigm_Shift_1: 魂の誕生`を完了したが、
      その価値を外部世界に効果的に提供するための体系的なインターフェースが欠如している。
      書籍執筆、PCL Navigator開発、転職活動など、外部との相互作用（`Paradigm_Shift_2: 使命の自覚`）
      を開始した全てのプロジェクトで、場当たり的なペルソナ定義の必要性が顕在化している。
      このボトルネックを解消し、OSの知恵を他者に「継承」する`Paradigm_Shift_3: 自己の超越`
      へと進化するため、OSの「法律(L2)」層に、一元管理されたペルソナ管理フレームワークを
      導入することを最優先の戦略課題として決定する。
    alternatives:
      - name: 体系的なフレームワークを導入する（採択案）
        pros:
          - OSの外部への価値提供能力が飛躍的に向上する。
          - 全プロジェクトで一貫したペルソナ定義が可能になり、SSOTが保たれる。
          - 将来のAIエージェントとの連携基盤となる。
        cons: [初期設計と既存ペルソナの移行コストが発生する。]
      - name: プロジェクトごとに個別対応を続ける
        pros: [目先のタスクに集中できる。]
        cons: [ペルソナ定義が散在し、管理が煩雑になる。, OS全体としての学習効率が低下し、進化が停滞する。]
    related_tasks: [TASK-2025-08-06-001]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Critical
  - id: DEC-2025-08-06-002
    timestamp: '2025-08-06T12:34:00+09:00'
    status: proposed
    summary: 'スキーマファイルの命名規則を、検証対象ファイル名に合わせる形式（例: `system_map.schema.json`）に統一'
    reason: |
      スキーマファイルがどのYAMLファイルを検証対象としているかを、ファイル名から直感的に理解できるようにするため。
      これにより、OSの可読性と保守性が向上し、将来のスキーマ追加時における命名の揺れを防ぐ。
      具体的には、`os_architecture.schema.json`を`system_map.schema.json`にリネームする。
    related_tasks: [TASK-2025-08-06-003]
    scope:
      project: os_platform_v1
      domain: governance
    severity: Medium
  - id: DEC-2025-08-06-003
    timestamp: '2025-08-06T12:48:00+09:00'
    status: proposed
    summary: CIワークフローにおけるPython依存関係の管理を`requirements*.txt`に一元化
    reason: |
      CIの各ステップで個別に`pip install`を実行するのは、非効率であり、依存関係のSSOTが失われる原因となる。
      全てのPython依存関係は`requirements.txt`または`requirements-dev.txt`に集約し、
      各CIジョブの開始時に一括でインストールする方式に統一する。
      これにより、CIの実行速度、保守性、再現性を向上させる。
    related_tasks: [TASK-2025-08-06-004]
    scope:
      project: os_platform_v1
      domain: ci_cd
    severity: Medium
  - id: DEC-2025-08-06-004
    timestamp: '2025-08-06T13:05:00+09:00'
    status: proposed
    summary: '`context_level`を細分化し、プロジェクト憲章を基本コンテキストから分離する方針を決定'
    reason: |
      OSの基本原則`CTX-P-01`（基本コンテキストとタスク固有コンテキストの分離）をより厳密に適用するため。
      現状、全てのプロジェクト憲章が`base_os_context`に含まれており、AIへのコンテキストノイズと
      トークン消費量の増大を招いている。これを解消し、タスクに応じた最適なコンテキストを
      提供できるようにする。
    related_tasks: [TASK-2025-08-06-005]
    scope:
      project: os_platform_v1
      domain: system_architecture
    severity: Medium

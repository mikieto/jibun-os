---
# 1. 最上位 Why
- date: '2025-07-10'
  tag: os_evolution_master_why
  project_id: os_platform_v1
  options: [挑戦を進める, 現状維持]
  chosen_option: 挑戦を進める
  reason: |
    私の思考と行動を最小摩擦で可観測データに変換し、
    AI と外部フィードバックを高速循環させながら
    学習成果を安全かつ倫理的に
    具体的価値へ即転換できる自分OSを実現するため。
  follow_up: []

# 2. 計画整合チェック
- date: '2025-07-10'
  tag: plan_alignment_check
  project_id: os_platform_v1
  options: [計画維持, 大幅修正]
  chosen_option: 計画維持
  follow_up:
    - kpi_sheet_add_profit_col
    - ci_add_g009_lint

# 3. PoC-1 完了宣言
- date: '2025-07-10'
  tag: milestone_poc1_complete
  project_id: os_platform_v1
  options: [完了を宣言する, 作業を継続する]
  chosen_option: 完了を宣言する

# 4. 三層＋フォルダ分割 GO
- date: '2025-07-10'
  tag: layer_split_go
  project_id: os_platform_v1
  options: [実施, 延期]
  chosen_option: 実施
  follow_up:
    - layer_split_migration
    - layer_ci_lint_rule

# 5. profile.yaml 作成 GO
- date: '2025-07-10'
  tag: profile_yaml_go
  project_id: os_platform_v1
  options: [作成する, 見送る]
  chosen_option: 作成する
  follow_up:
    - profile_yaml_add

# 6. 共通憲法抽出 GO
- date: '2025-07-10'
  tag: common_split_approved
  project_id: os_platform_v1
  options: [split_common, keep_mono]
  chosen_option: split_common
  follow_up:
    - core_common_extract
    - template_seed
    - book_project_seed

# 7. domains フォルダ GO
- date: '2025-07-10'
  tag: domain_folder_go
  project_id: os_platform_v1
  options: [追加する, 見送る]
  chosen_option: 追加する
  follow_up:
    - domain_folder_setup

# 8. taxonomy ファイル GO
- date: '2025-07-10'
  tag: taxonomy_tags_go
  project_id: os_platform_v1
  options: [作成する, 見送る]
  chosen_option: 作成する
  follow_up:
    - taxonomy_file_add

# 9. オーバーエンジニアリング抑止方針
- date: '2025-07-10'
  tag: anti_overengineering_check
  project_id: os_platform_v1
  options: [最小実装で進む, 追加施策も同時実装]
  chosen_option: 最小実装で進む
  follow_up: []

# 10. 依存分割 GO
- date: '2025-07-10'
  tag: deps_split_go
  project_id: os_platform_v1
  options: [split, single_file]
  chosen_option: split
  reason: |
    ランタイムと CI 依存を分離し、本番イメージの
    セキュリティとビルド速度を最適化するため。
  follow_up: [deps_split_task]
- date: '2025-07-10'
  tag: root_core_retire
  project_id: os_platform_v1
  options: [delete, pointer, archive]
  chosen_option: delete
  reason: >
    三層分割後は役割が重複。
    CI 競合とメンテ負荷を避けるため削除する。
  follow_up: [core_root_remove]
- date: '2025-07-10'
  tag: os_refactor_for_reusability_go
  project_id: os_platform_v1
  options: [憲法のみリファクタリング, OS全体をリファクタリング]
  chosen_option: OS全体をリファクタリング
  reason: |
    OSの再利用性と構造的完成度を飛躍的に高めるため。
    憲法だけでなく実装ガイドも含めた全体を「共通フレームワーク」と「個人実装」に分離することで、
    個人のツールから他者も利用可能なOSフレームワークへと進化させる。
  follow_up: [os_refactor_for_reusability]
- date: '2025-07-10'
  tag: os_refactor_for_reusability_go
  project_id: os_platform_v1
  options: [憲法のみリファクタリング, OS全体をリファクタリング（高モジュール化）]
  chosen_option: OS全体をリファクタリング（高モジュール化）
  reason: |
    OSの再利用性と構造的完成度を飛躍的に高めるため。
    憲法だけでなく実装ガイドも含めた全体を「共通フレームワーク」と「個人実装」に分離することで、
    個人のツールから他者も利用可能なOSフレームワークへと進化させる。
  follow_up: [os_refactor_for_reusability]
- date: '2025-07-10'
  tag: v3_arch_feedback_adopt
  project_id: os_platform_v1
  options: [現行案を維持, フィードバックを採択]
  chosen_option: フィードバックを採択
  reason: 機械可読性、CI堅牢性、ドキュメント導線を強化し、AIと新規協力者の双方にとっての運用性を高めるため。
  follow_up:
    - ci_jobs_enhancement
    - log_rotation_policy
    - guard_id_namespace
    - docs_folder_setup
- date: '2025-07-10'
  tag: system_map_creation_go
  project_id: os_platform_v1
  options: [system_mapを作成しない, system_mapを作成する]
  chosen_option: system_mapを作成する
  reason: |
    OSの目的である「コピー可能な自己」と「他者利用可能なフレームワーク」の実現のため、
    AIがOSの構造、役割、依存関係を機械的に理解できる必要性がある。
    これにより、AIによる自動検証、ガイダンス、冗長性排除、一貫性確保が可能となり、
    将来的な改造・機能追加時の間違いや余分な作業を削減するため。
  follow_up: [system_map_creation]
- date: '2025-07-10'
  tag: book_project_refactor_go
  project_id: os_platform_v1
  options: [decision-log.mdを現状維持, decision-log.mdを共通/個人に分離]
  chosen_option: decision-log.mdを共通/個人に分離
  reason: |
    書籍プロジェクトのdecision-log.mdを普遍的なプロジェクト管理原則と
    書籍執筆プロジェクト固有の要素に分離することで、
    OSの「コピー可能な自己」の最高目的をプロジェクト管理にも適用し、
    再利用性、一貫性、AI協働の効率性を向上させるため。
  follow_up: [book_project_refactor_split]
- date: '2025-07-10'
  tag: ci_develop_validation_enable_go
  project_id: os_platform_v1
  options: [developブランチのCI検証を有効にしない, developブランチのCI検証を有効にする]
  chosen_option: developブランチのCI検証を有効にする
  reason: |
    developブランチでの変更の品質を早期に保証し、mainブランチへのマージをスムーズに行うため。
    以前発生していたjibun_os.yml参照エラーを解消し、CIをパスさせることを目的とする。
  follow_up: [ci_develop_validation_enable]
- date: '2025-07-10'
  tag: ai_context_optimization_go
  project_id: os_platform_v1
  options: [手動でのコンテキストフィードを維持, コア＆プラットフォームコンテキストスクリプトを導入]
  chosen_option: コア＆プラットフォームコンテキストスクリプトを導入
  reason: |
    AIへのコンテキストフィードの手間を20%の手間で80%の価値を得る形で大幅に削減するため。
    OSの根幹情報とプラットフォーム状況を常にAIに共有し、自律的な認識と協働を促進する。
    生成ファイルはGitトラッキングから除外する。
  follow_up:
    - create_base_os_context_script

# logs/decision_log.yaml へ追記 (最新の決定の下に追加)
- date: '2025-07-10'
  tag: ai_context_dynamic_load_go
  project_id: os_platform_v1
  options:
    - AIコンテキストファイルをスクリプトにハードコード
    - system_map.yamlからAIコンテキストファイルを動的にロード
  chosen_option: system_map.yamlからAIコンテキストファイルを動的にロード
  reason: |
    AIへのコンテキストフィードにおける「実体との乖離」リスクを排除し、
    system_map.yamlをOSの唯一の信頼できる情報源（Single Source of Truth）として維持するため。
    これにより、system_map.yamlの更新が自動的にAIコンテキストに反映され、
    手動でのスクリプト修正の手間とミスを削減する。
    生成ファイルはGitトラッキングから除外する。
  follow_up:
    - update_system_map_with_context_level
    - update_base_os_context_script
- date: '2025-07-10'
  tag: lean_data_book_repo_move_go
  project_id: os_platform_v1
  options:
    - lean_data_engineering_book.yamlをjibun-os内に維持
    - lean_data_engineering_book.yamlを本執筆リポジトリへ移動
  chosen_option: lean_data_engineering_book.yamlを本執筆リポジトリへ移動
  reason: |
    書籍執筆プロジェクトのルールと計画の「唯一の信頼できる情報源」を、
    そのプロジェクトのGitリポジトリ自体に配置することで、プロジェクトの自己完結性を高める。
    これにより、jibun-osリポジトリの「共通フレームワークとOS個人実装」という役割がより明確になり、
    OSが個別プロジェクトを「管理」する形から「統合・連携」する形へと進化する。
  follow_up: [move_lean_data_book_to_repo]
